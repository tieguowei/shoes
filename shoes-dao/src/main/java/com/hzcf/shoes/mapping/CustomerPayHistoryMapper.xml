<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzcf.shoes.dao.CustomerPayHistoryMapper">
  <resultMap id="BaseResultMap" type="com.hzcf.shoes.model.CustomerPayHistory">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="pay_time" jdbcType="DATE" property="payTime" />
    <result column="customer_name" jdbcType="VARCHAR" property="customerName" />
    <result column="bank" jdbcType="VARCHAR" property="bank" />
    <result column="pay_money" jdbcType="DECIMAL" property="payMoney" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="operator" jdbcType="INTEGER" property="operator" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, pay_time, customer_name, bank, pay_money, create_time, operator
  </sql>
  <select id="selectByExample" parameterType="com.hzcf.shoes.model.CustomerPayHistoryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from zly_customer_pay_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from zly_customer_pay_history
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from zly_customer_pay_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hzcf.shoes.model.CustomerPayHistoryExample">
    delete from zly_customer_pay_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hzcf.shoes.model.CustomerPayHistory">
    insert into zly_customer_pay_history (id, pay_time, customer_name, 
      bank, pay_money, create_time, 
      operator)
    values (#{id,jdbcType=INTEGER}, #{payTime,jdbcType=DATE}, #{customerName,jdbcType=VARCHAR}, 
      #{bank,jdbcType=VARCHAR}, #{payMoney,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, 
      #{operator,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.hzcf.shoes.model.CustomerPayHistory">
    insert into zly_customer_pay_history
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="customerName != null">
        customer_name,
      </if>
      <if test="bank != null">
        bank,
      </if>
      <if test="payMoney != null">
        pay_money,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="operator != null">
        operator,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=DATE},
      </if>
      <if test="customerName != null">
        #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="bank != null">
        #{bank,jdbcType=VARCHAR},
      </if>
      <if test="payMoney != null">
        #{payMoney,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operator != null">
        #{operator,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hzcf.shoes.model.CustomerPayHistoryExample" resultType="java.lang.Long">
    select count(*) from zly_customer_pay_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update zly_customer_pay_history
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.payTime != null">
        pay_time = #{record.payTime,jdbcType=DATE},
      </if>
      <if test="record.customerName != null">
        customer_name = #{record.customerName,jdbcType=VARCHAR},
      </if>
      <if test="record.bank != null">
        bank = #{record.bank,jdbcType=VARCHAR},
      </if>
      <if test="record.payMoney != null">
        pay_money = #{record.payMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.operator != null">
        operator = #{record.operator,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update zly_customer_pay_history
    set id = #{record.id,jdbcType=INTEGER},
      pay_time = #{record.payTime,jdbcType=DATE},
      customer_name = #{record.customerName,jdbcType=VARCHAR},
      bank = #{record.bank,jdbcType=VARCHAR},
      pay_money = #{record.payMoney,jdbcType=DECIMAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      operator = #{record.operator,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hzcf.shoes.model.CustomerPayHistory">
    update zly_customer_pay_history
    <set>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=DATE},
      </if>
      <if test="customerName != null">
        customer_name = #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="bank != null">
        bank = #{bank,jdbcType=VARCHAR},
      </if>
      <if test="payMoney != null">
        pay_money = #{payMoney,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operator != null">
        operator = #{operator,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hzcf.shoes.model.CustomerPayHistory">
    update zly_customer_pay_history
    set pay_time = #{payTime,jdbcType=DATE},
      customer_name = #{customerName,jdbcType=VARCHAR},
      bank = #{bank,jdbcType=VARCHAR},
      pay_money = #{payMoney,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      operator = #{operator,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 查询客户还款明细 -->
  <select id="getCustomerPaymentHistory" parameterType="hashmap" resultType="java.util.LinkedHashMap">
 	 SELECT
	  IFNULL(DATE_FORMAT(pay_time,'%Y-%m-%d'),'') pay_time,
	  IFNULL(bank,'') bank,
	  IFNULL(pay_money,'') pay_money
	FROM
		zly_customer_pay_history
	WHERE
		customer_name =#{customer_name}
  </select>
  
  
   <!-- 客户付款列表分页 -->
  <select id="findAllRetMapByPage" resultType="hashmap" parameterType="hashmap">
  	SELECT
			id,
			DATE_FORMAT(pay_time, '%Y-%m-%d') pay_time,
			customer_name,
			bank,
			pay_money,
			create_time,
			operator
	FROM zly_customer_pay_history
	WHERE 1=1
	<if test="customerName != null">
  		and customer_name =#{customerName}
 	</if>
	limit #{startIndex},#{pageSize}
  </select>
  
  <!-- 员工列表分页总数 -->
  <select id="findAllByPageCount" resultType="long" parameterType="hashmap">
  	SELECT COUNT(id) FROM zly_customer_pay_history
	WHERE 1=1
	<if test="customerName != null">
  		and customer_name =#{customerName}
 	</if>
  </select>
</mapper>