<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzcf.shoes.dao.OrderMapper">
  <resultMap id="BaseResultMap" type="com.hzcf.shoes.model.Order">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="pay_time" jdbcType="DATE" property="payTime" />
    <result column="customer_name" jdbcType="VARCHAR" property="customerName" />
    <result column="factory_name" jdbcType="VARCHAR" property="factoryName" />
    <result column="item_no" jdbcType="VARCHAR" property="itemNo" />
    <result column="number_packages" jdbcType="INTEGER" property="numberPackages" />
    <result column="shoe_dual" jdbcType="INTEGER" property="shoeDual" />
    <result column="sale_price" jdbcType="DECIMAL" property="salePrice" />
    <result column="price_spread" jdbcType="DECIMAL" property="priceSpread" />
    <result column="difference_number" jdbcType="INTEGER" property="differenceNumber" />
    <result column="returns_number" jdbcType="INTEGER" property="returnsNumber" />
    <result column="customer_is_defective_goods" jdbcType="CHAR" property="customerIsDefectiveGoods" />
    <result column="factory_is_defective_goods" jdbcType="CHAR" property="factoryIsDefectiveGoods" />
    <result column="spred_status" jdbcType="CHAR" property="spredStatus" />
    <result column="return_status" jdbcType="CHAR" property="returnStatus" />
    <result column="season" jdbcType="CHAR" property="season" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="operator" jdbcType="INTEGER" property="operator" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, pay_time, customer_name, factory_name, item_no, number_packages, shoe_dual, sale_price, 
    price_spread, difference_number, returns_number, customer_is_defective_goods, factory_is_defective_goods, 
    spred_status, return_status, season, remark, create_time, update_time, operator
  </sql>
  <select id="selectByExample" parameterType="com.hzcf.shoes.model.OrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from zly_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from zly_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from zly_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hzcf.shoes.model.OrderExample">
    delete from zly_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hzcf.shoes.model.Order">
    insert into zly_order (id, pay_time, customer_name, 
      factory_name, item_no, number_packages, 
      shoe_dual, sale_price, price_spread, 
      difference_number, returns_number, customer_is_defective_goods, 
      factory_is_defective_goods, spred_status, return_status, 
      season, remark, create_time, 
      update_time, operator)
    values (#{id,jdbcType=INTEGER}, #{payTime,jdbcType=DATE}, #{customerName,jdbcType=VARCHAR}, 
      #{factoryName,jdbcType=VARCHAR}, #{itemNo,jdbcType=VARCHAR}, #{numberPackages,jdbcType=INTEGER}, 
      #{shoeDual,jdbcType=INTEGER}, #{salePrice,jdbcType=DECIMAL}, #{priceSpread,jdbcType=DECIMAL}, 
      #{differenceNumber,jdbcType=INTEGER}, #{returnsNumber,jdbcType=INTEGER}, #{customerIsDefectiveGoods,jdbcType=CHAR}, 
      #{factoryIsDefectiveGoods,jdbcType=CHAR}, #{spredStatus,jdbcType=CHAR}, #{returnStatus,jdbcType=CHAR}, 
      #{season,jdbcType=CHAR}, #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{operator,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.hzcf.shoes.model.Order">
    insert into zly_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="customerName != null">
        customer_name,
      </if>
      <if test="factoryName != null">
        factory_name,
      </if>
      <if test="itemNo != null">
        item_no,
      </if>
      <if test="numberPackages != null">
        number_packages,
      </if>
      <if test="shoeDual != null">
        shoe_dual,
      </if>
      <if test="salePrice != null">
        sale_price,
      </if>
      <if test="priceSpread != null">
        price_spread,
      </if>
      <if test="differenceNumber != null">
        difference_number,
      </if>
      <if test="returnsNumber != null">
        returns_number,
      </if>
      <if test="customerIsDefectiveGoods != null">
        customer_is_defective_goods,
      </if>
      <if test="factoryIsDefectiveGoods != null">
        factory_is_defective_goods,
      </if>
      <if test="spredStatus != null">
        spred_status,
      </if>
      <if test="returnStatus != null">
        return_status,
      </if>
      <if test="season != null">
        season,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="operator != null">
        operator,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=DATE},
      </if>
      <if test="customerName != null">
        #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="factoryName != null">
        #{factoryName,jdbcType=VARCHAR},
      </if>
      <if test="itemNo != null">
        #{itemNo,jdbcType=VARCHAR},
      </if>
      <if test="numberPackages != null">
        #{numberPackages,jdbcType=INTEGER},
      </if>
      <if test="shoeDual != null">
        #{shoeDual,jdbcType=INTEGER},
      </if>
      <if test="salePrice != null">
        #{salePrice,jdbcType=DECIMAL},
      </if>
      <if test="priceSpread != null">
        #{priceSpread,jdbcType=DECIMAL},
      </if>
      <if test="differenceNumber != null">
        #{differenceNumber,jdbcType=INTEGER},
      </if>
      <if test="returnsNumber != null">
        #{returnsNumber,jdbcType=INTEGER},
      </if>
      <if test="customerIsDefectiveGoods != null">
        #{customerIsDefectiveGoods,jdbcType=CHAR},
      </if>
      <if test="factoryIsDefectiveGoods != null">
        #{factoryIsDefectiveGoods,jdbcType=CHAR},
      </if>
      <if test="spredStatus != null">
        #{spredStatus,jdbcType=CHAR},
      </if>
      <if test="returnStatus != null">
        #{returnStatus,jdbcType=CHAR},
      </if>
      <if test="season != null">
        #{season,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operator != null">
        #{operator,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hzcf.shoes.model.OrderExample" resultType="java.lang.Long">
    select count(*) from zly_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update zly_order
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.payTime != null">
        pay_time = #{record.payTime,jdbcType=DATE},
      </if>
      <if test="record.customerName != null">
        customer_name = #{record.customerName,jdbcType=VARCHAR},
      </if>
      <if test="record.factoryName != null">
        factory_name = #{record.factoryName,jdbcType=VARCHAR},
      </if>
      <if test="record.itemNo != null">
        item_no = #{record.itemNo,jdbcType=VARCHAR},
      </if>
      <if test="record.numberPackages != null">
        number_packages = #{record.numberPackages,jdbcType=INTEGER},
      </if>
      <if test="record.shoeDual != null">
        shoe_dual = #{record.shoeDual,jdbcType=INTEGER},
      </if>
      <if test="record.salePrice != null">
        sale_price = #{record.salePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.priceSpread != null">
        price_spread = #{record.priceSpread,jdbcType=DECIMAL},
      </if>
      <if test="record.differenceNumber != null">
        difference_number = #{record.differenceNumber,jdbcType=INTEGER},
      </if>
      <if test="record.returnsNumber != null">
        returns_number = #{record.returnsNumber,jdbcType=INTEGER},
      </if>
      <if test="record.customerIsDefectiveGoods != null">
        customer_is_defective_goods = #{record.customerIsDefectiveGoods,jdbcType=CHAR},
      </if>
      <if test="record.factoryIsDefectiveGoods != null">
        factory_is_defective_goods = #{record.factoryIsDefectiveGoods,jdbcType=CHAR},
      </if>
      <if test="record.spredStatus != null">
        spred_status = #{record.spredStatus,jdbcType=CHAR},
      </if>
      <if test="record.returnStatus != null">
        return_status = #{record.returnStatus,jdbcType=CHAR},
      </if>
      <if test="record.season != null">
        season = #{record.season,jdbcType=CHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.operator != null">
        operator = #{record.operator,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update zly_order
    set id = #{record.id,jdbcType=INTEGER},
      pay_time = #{record.payTime,jdbcType=DATE},
      customer_name = #{record.customerName,jdbcType=VARCHAR},
      factory_name = #{record.factoryName,jdbcType=VARCHAR},
      item_no = #{record.itemNo,jdbcType=VARCHAR},
      number_packages = #{record.numberPackages,jdbcType=INTEGER},
      shoe_dual = #{record.shoeDual,jdbcType=INTEGER},
      sale_price = #{record.salePrice,jdbcType=DECIMAL},
      price_spread = #{record.priceSpread,jdbcType=DECIMAL},
      difference_number = #{record.differenceNumber,jdbcType=INTEGER},
      returns_number = #{record.returnsNumber,jdbcType=INTEGER},
      customer_is_defective_goods = #{record.customerIsDefectiveGoods,jdbcType=CHAR},
      factory_is_defective_goods = #{record.factoryIsDefectiveGoods,jdbcType=CHAR},
      spred_status = #{record.spredStatus,jdbcType=CHAR},
      return_status = #{record.returnStatus,jdbcType=CHAR},
      season = #{record.season,jdbcType=CHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      operator = #{record.operator,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hzcf.shoes.model.Order">
    update zly_order
    <set>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=DATE},
      </if>
      <if test="customerName != null">
        customer_name = #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="factoryName != null">
        factory_name = #{factoryName,jdbcType=VARCHAR},
      </if>
      <if test="itemNo != null">
        item_no = #{itemNo,jdbcType=VARCHAR},
      </if>
      <if test="numberPackages != null">
        number_packages = #{numberPackages,jdbcType=INTEGER},
      </if>
      <if test="shoeDual != null">
        shoe_dual = #{shoeDual,jdbcType=INTEGER},
      </if>
      <if test="salePrice != null">
        sale_price = #{salePrice,jdbcType=DECIMAL},
      </if>
      <if test="priceSpread != null">
        price_spread = #{priceSpread,jdbcType=DECIMAL},
      </if>
      <if test="differenceNumber != null">
        difference_number = #{differenceNumber,jdbcType=INTEGER},
      </if>
      <if test="returnsNumber != null">
        returns_number = #{returnsNumber,jdbcType=INTEGER},
      </if>
      <if test="customerIsDefectiveGoods != null">
        customer_is_defective_goods = #{customerIsDefectiveGoods,jdbcType=CHAR},
      </if>
      <if test="factoryIsDefectiveGoods != null">
        factory_is_defective_goods = #{factoryIsDefectiveGoods,jdbcType=CHAR},
      </if>
      <if test="spredStatus != null">
        spred_status = #{spredStatus,jdbcType=CHAR},
      </if>
      <if test="returnStatus != null">
        return_status = #{returnStatus,jdbcType=CHAR},
      </if>
      <if test="season != null">
        season = #{season,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operator != null">
        operator = #{operator,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hzcf.shoes.model.Order">
    update zly_order
    set pay_time = #{payTime,jdbcType=DATE},
      customer_name = #{customerName,jdbcType=VARCHAR},
      factory_name = #{factoryName,jdbcType=VARCHAR},
      item_no = #{itemNo,jdbcType=VARCHAR},
      number_packages = #{numberPackages,jdbcType=INTEGER},
      shoe_dual = #{shoeDual,jdbcType=INTEGER},
      sale_price = #{salePrice,jdbcType=DECIMAL},
      price_spread = #{priceSpread,jdbcType=DECIMAL},
      difference_number = #{differenceNumber,jdbcType=INTEGER},
      returns_number = #{returnsNumber,jdbcType=INTEGER},
      customer_is_defective_goods = #{customerIsDefectiveGoods,jdbcType=CHAR},
      factory_is_defective_goods = #{factoryIsDefectiveGoods,jdbcType=CHAR},
      spred_status = #{spredStatus,jdbcType=CHAR},
      return_status = #{returnStatus,jdbcType=CHAR},
      season = #{season,jdbcType=CHAR},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      operator = #{operator,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 订单列表动态查询条件 -->
  <sql id="dynamicPageWhere">
  	<if test="customerName != null">
  	 and customer_name = #{customerName}
 	</if>
 	<if test="factoryName != null">
  		 and factory_name  LIKE CONCAT('%',#{factoryName},'%')
 	</if>
 	<if test="customerIsDefectiveGoods != null">
  		and customer_is_defective_goods = #{customerIsDefectiveGoods}
 	</if>
 	<if test="factoryIsDefectiveGoods != null">
  		and factory_is_defective_goods = #{factoryIsDefectiveGoods}
 	</if>
 	<if test="season != null">
  		and season= #{season}
 	</if>
 	<if test="minCreateTime != null">
      <![CDATA[
 		AND DATE_FORMAT(pay_time ,'%Y-%m-%d') >= #{minCreateTime}
 		]]>
    </if>
    <if test="maxCreateTime != null">
      <![CDATA[
 		AND DATE_FORMAT(pay_time ,'%Y-%m-%d') <= #{maxCreateTime}
 	]]>
    </if>
  </sql>
  
  <!-- 订单列表分页 -->
  <select id="findAllRetMapByPage" resultType="hashmap" parameterType="hashmap">
  	SELECT
	  	id,
		DATE_FORMAT(pay_time,'%Y-%m-%d') pay_time,
		customer_name,
		factory_name,
		item_no,
		number_packages,
		shoe_dual,
		sale_price,
		case when price_spread = 0 then ''
		else price_spread end price_spread,

		case when difference_number = 0 then ''
		else difference_number end difference_number,

		case when returns_number = 0 then ''
		else returns_number end returns_number,
		
		case when customer_is_defective_goods = 0 then '是'
   		 else '否' end as customer_is_defective_goods,

		case when factory_is_defective_goods = 0 then '是'
    	else '否' end as factory_is_defective_goods ,

		case when season = 0 then '冬季'
    	else '其他季节' end as season ,
	 
		(number_packages * shoe_dual * sale_price)  totalMoney,		create_time,
		update_time,
		remark
	FROM zly_order 
	WHERE 1=1
	<include refid="dynamicPageWhere"/>
	order by pay_time asc
	limit #{startIndex},#{pageSize}
  </select>
  
  <!-- 订单列表分页总数 -->
  <select id="findAllByPageCount" resultType="long" parameterType="hashmap">
  	SELECT COUNT(id) FROM zly_order 
	WHERE 1=1
	<include refid="dynamicPageWhere"/>
  </select>
  
  <!-- 查询客户固定时间段的订单 -->
  <select id="checkBillByCustomerAndPayTime" parameterType="hashmap" resultType="java.util.LinkedHashMap">
     SELECT
		IFNULL(DATE_FORMAT(pay_time,'%Y-%m-%d'),'') pay_time,
		IFNULL(customer_name,'') customer_name,
		IFNULL(factory_name,'') factory_name,
		IFNULL(item_no,'') item_no,
		IFNULL(number_packages,0) number_packages,
		IFNULL(shoe_dual,0) shoe_dual,
		IFNULL(sale_price,0) sale_price,
		IFNULL((number_packages * shoe_dual * sale_price),0)totalMoney,
		IFNULL(remark,'') remark
    from zly_order 
    where customer_is_defective_goods = 1
  <if test="customerName != null">
  	 and customer_name = #{customerName}
 	</if>
 	<if test="minCreateTime != null">
      <![CDATA[
 		AND DATE_FORMAT(pay_time ,'%Y-%m-%d') >= #{minCreateTime}
 		]]>
    </if>
    <if test="maxCreateTime != null">
      <![CDATA[
 		AND DATE_FORMAT(pay_time ,'%Y-%m-%d') <= #{maxCreateTime}
 	]]>
    </if>
    order by  pay_time asc
  </select>
  
  <!-- 查询客户固定时间段的订单汇总  用于生成excel-->
  <select id="getTotalMoneyByParam" parameterType="hashmap" resultType="hashmap">
  SELECT
			IFNULL((sum(number_packages * shoe_dual * sale_price)),0) totalGoodsMoney,
		  	IFNULL((sum(number_packages * shoe_dual)),0) totalNum,
			IFNULL((sum(number_packages * shoe_dual * 2 )),0) jianci,
			<!-- 计算本次欠款 总金额-减次 （然后在程序中减去本账单所有退货和差价即可 ）-->
			IFNULL((sum(number_packages * shoe_dual * sale_price- (number_packages * shoe_dual * 2))),0) blanceDue
	FROM
		zly_order 
	WHERE
		customer_name = #{customerName}
		  <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') >= #{minCreateTime}
			]]>
		  <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') <=#{maxCreateTime}
			]]>
	and customer_is_defective_goods = 1
  </select>
  
 
  
  <!-- 查询客户历史账单时间内有无差价和退货 列表(未处理状态) -->
  <select id="getOrderByStartAndEndTime" parameterType="hashmap" resultType="java.util.LinkedHashMap">
  SELECT
	  IFNULL(DATE_FORMAT(pay_time,'%Y-%m-%d'),'') pay_time,
	  IFNULL(factory_name,'') factory_name,
	  IFNULL(item_no,'') item_no,
	  	case when price_spread = 0 then ''
		else (CONCAT(price_spread,' * ',difference_number)) end  price_spread,
		case when returns_number = 0 then ''
		else (CONCAT(returns_number,' * ',sale_price)) end  returns_number,
	  IFNULL(((price_spread*difference_number) + (returns_number*sale_price)) ,0) totalMoney
	FROM
		zly_order
	WHERE
		customer_name =#{customerName}
	 <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') >= #{minCreateTime}
			]]>
		  <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') <=#{maxCreateTime}
	]]>
	AND (spred_status = 1 or return_status =1)
  	order by pay_time asc
  </select>
  
  <!-- 查询客户历史账单时间内(差价和退货)汇总-->
  <select id="getBillPriceSum" parameterType="hashmap" resultType="String">
  SELECT
	  IFNULL(sum(((price_spread*difference_number) + (returns_number*sale_price))) ,0) totalMoney
	FROM
		zly_order
	WHERE
		customer_name =#{customerName}
	 <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') >= #{minCreateTime}
			]]>
		  <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') <=#{maxCreateTime}
	]]>
	AND (spred_status = 1 or return_status =1)
  </select>
  
  <!-- 修改订单（客户或者鞋厂 是否减次状态） -->
  <update id="updateItemStatus" parameterType="hashmap">
  update
	 zly_order
	 <if test="customerIsDefectiveGoods != null">
  		 SET customer_is_defective_goods =#{customerIsDefectiveGoods}
     </if>
     <if test="factoryIsDefectiveGoods != null">
  		 SET factory_is_defective_goods = #{factoryIsDefectiveGoods}
     </if>
     WHERE
		customer_name =#{customerName}
	 <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') >= #{minCreateTime}
			]]>
		  <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') <=#{maxCreateTime}
	]]>
  </update>
  
   <!-- 查询客户有无未处理订单 -->
  <select id="checkCustomerItemIsOver" parameterType="hashmap" resultType="hashMap">
     SELECT
		id
    from zly_order where customer_name = #{customerName}
 	<if test="minCreateTime != null">
      <![CDATA[
 		AND DATE_FORMAT(pay_time ,'%Y-%m-%d') >= #{minCreateTime}
 		]]>
    </if>
    <if test="maxCreateTime != null">
      <![CDATA[
 		AND DATE_FORMAT(pay_time ,'%Y-%m-%d') <= #{maxCreateTime}
 	]]>
    </if>
		AND (spred_status = 1 or return_status =1)
  </select>
  
  <!-- 主键查询 -->
  <select id="selectById" parameterType="java.lang.Integer" resultType="hashmap">
   SELECT
		id,
		DATE_FORMAT(pay_time, '%Y-%m-%d') payTime,
		customer_name customerName,
		factory_name factoryName,
		item_no itemNo,
		number_packages numberPackages,
		shoe_dual shoeDual,
		sale_price salePrice,
		price_spread priceSpread,
		difference_number differenceNumber,
		returns_number returnsNumber,
		customer_is_defective_goods customerIsDefectiveGoods,
		factory_is_defective_goods factoryIsDefectiveGoods,
		season,
		remark
	FROM
		zly_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  
    <update id="updateById" parameterType="com.hzcf.shoes.model.Order">
    update zly_order
    <set>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=DATE},
      </if>
      <if test="customerName != null">
        customer_name = #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="factoryName != null">
        factory_name = #{factoryName,jdbcType=VARCHAR},
      </if>
      <if test="itemNo != null">
        item_no = #{itemNo,jdbcType=VARCHAR},
      </if>
      <if test="numberPackages != null">
        number_packages = #{numberPackages,jdbcType=INTEGER},
      </if>
      <if test="shoeDual != null">
        shoe_dual = #{shoeDual,jdbcType=INTEGER},
      </if>
      <if test="salePrice != null">
        sale_price = #{salePrice,jdbcType=DECIMAL},
      </if>
      <if test="priceSpread != null">
        price_spread = #{priceSpread,jdbcType=DECIMAL},
      </if>
      <if test="priceSpread == null">
        price_spread = 0,
      </if>
      <if test="differenceNumber != null">
        difference_number = #{differenceNumber,jdbcType=INTEGER},
      </if>
      <if test="differenceNumber == null">
        difference_number = 0,
      </if>
      <if test="returnsNumber != null">
        returns_number = #{returnsNumber,jdbcType=INTEGER},
      </if>
      <if test="returnsNumber == null">
        returns_number = 0,
      </if>
      <if test="customerIsDefectiveGoods != null">
        customer_is_defective_goods = #{customerIsDefectiveGoods,jdbcType=CHAR},
      </if>
      <if test="factoryIsDefectiveGoods != null">
        factory_is_defective_goods = #{factoryIsDefectiveGoods,jdbcType=CHAR},
      </if>
      
      <if test="priceSpread != null and  priceSpread !=0">
        spred_status = 1,
      </if>
      
      <if test="returnsNumber != null and returnsNumber !=0">
        return_status = 1,
      </if>
      
      <if test="season != null">
        season = #{season,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operator != null">
        operator = #{operator,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  
  <!-- 修改此账单中差价的订单状态 -->
  <update id="updatePriceStatus" parameterType="hashmap">
   update
	 zly_order
  	 	SET spred_status =#{after}
     WHERE
		customer_name =#{customerName}
	 <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') >= #{minCreateTime}
			]]>
		  <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') <=#{maxCreateTime}
	]]>
	and spred_status = #{before}
  </update>
  
  
   <!-- 修改此账单中退货的订单状态 -->
  <update id="updateReturnStatus" parameterType="hashmap">
   update
	 zly_order
  	 	SET return_status =#{after}
     WHERE
		customer_name =#{customerName}
	 <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') >= #{minCreateTime}
			]]>
		  <![CDATA[
			AND DATE_FORMAT(pay_time ,'%Y-%m-%d') <=#{maxCreateTime}
	]]>
	and return_status = #{before}
  </update>
</mapper>