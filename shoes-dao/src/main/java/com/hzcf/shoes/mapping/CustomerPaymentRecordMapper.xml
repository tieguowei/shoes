<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzcf.shoes.dao.CustomerPaymentRecordMapper">
  <resultMap id="BaseResultMap" type="com.hzcf.shoes.model.CustomerPaymentRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="customer_name" jdbcType="VARCHAR" property="customerName" />
    <result column="bill_start_time" jdbcType="DATE" property="billStartTime" />
    <result column="bill_end_time" jdbcType="DATE" property="billEndTime" />
    <result column="customary_dues" jdbcType="DECIMAL" property="customaryDues" />
    <result column="actual_payment" jdbcType="DECIMAL" property="actualPayment" />
    <result column="balance_due" jdbcType="DECIMAL" property="balanceDue" />
    <result column="small_change" jdbcType="DECIMAL" property="smallChange" />
    <result column="defective_goods" jdbcType="DECIMAL" property="defectiveGoods" />
    <result column="spred_return_money" jdbcType="DECIMAL" property="spredReturnMoney" />
    <result column="bill_status" jdbcType="CHAR" property="billStatus" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="operator" jdbcType="INTEGER" property="operator" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, customer_name, bill_start_time, bill_end_time, customary_dues, actual_payment, 
    balance_due, small_change, defective_goods, spred_return_money, bill_status, remark, 
    create_time, update_time, operator
  </sql>
  <select id="selectByExample" parameterType="com.hzcf.shoes.model.CustomerPaymentRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from zly_customer_payment_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from zly_customer_payment_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from zly_customer_payment_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hzcf.shoes.model.CustomerPaymentRecordExample">
    delete from zly_customer_payment_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hzcf.shoes.model.CustomerPaymentRecord">
    insert into zly_customer_payment_record (id, customer_name, bill_start_time, 
      bill_end_time, customary_dues, actual_payment, 
      balance_due, small_change, defective_goods, 
      spred_return_money, bill_status, remark, 
      create_time, update_time, operator
      )
    values (#{id,jdbcType=INTEGER}, #{customerName,jdbcType=VARCHAR}, #{billStartTime,jdbcType=DATE}, 
      #{billEndTime,jdbcType=DATE}, #{customaryDues,jdbcType=DECIMAL}, #{actualPayment,jdbcType=DECIMAL}, 
      #{balanceDue,jdbcType=DECIMAL}, #{smallChange,jdbcType=DECIMAL}, #{defectiveGoods,jdbcType=DECIMAL}, 
      #{spredReturnMoney,jdbcType=DECIMAL}, #{billStatus,jdbcType=CHAR}, #{remark,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{operator,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hzcf.shoes.model.CustomerPaymentRecord">
    insert into zly_customer_payment_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="customerName != null">
        customer_name,
      </if>
      <if test="billStartTime != null">
        bill_start_time,
      </if>
      <if test="billEndTime != null">
        bill_end_time,
      </if>
      <if test="customaryDues != null">
        customary_dues,
      </if>
      <if test="actualPayment != null">
        actual_payment,
      </if>
      <if test="balanceDue != null">
        balance_due,
      </if>
      <if test="smallChange != null">
        small_change,
      </if>
      <if test="defectiveGoods != null">
        defective_goods,
      </if>
      <if test="spredReturnMoney != null">
        spred_return_money,
      </if>
      <if test="billStatus != null">
        bill_status,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="operator != null">
        operator,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="customerName != null">
        #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="billStartTime != null">
        #{billStartTime,jdbcType=DATE},
      </if>
      <if test="billEndTime != null">
        #{billEndTime,jdbcType=DATE},
      </if>
      <if test="customaryDues != null">
        #{customaryDues,jdbcType=DECIMAL},
      </if>
      <if test="actualPayment != null">
        #{actualPayment,jdbcType=DECIMAL},
      </if>
      <if test="balanceDue != null">
        #{balanceDue,jdbcType=DECIMAL},
      </if>
      <if test="smallChange != null">
        #{smallChange,jdbcType=DECIMAL},
      </if>
      <if test="defectiveGoods != null">
        #{defectiveGoods,jdbcType=DECIMAL},
      </if>
      <if test="spredReturnMoney != null">
        #{spredReturnMoney,jdbcType=DECIMAL},
      </if>
      <if test="billStatus != null">
        #{billStatus,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operator != null">
        #{operator,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hzcf.shoes.model.CustomerPaymentRecordExample" resultType="java.lang.Long">
    select count(*) from zly_customer_payment_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update zly_customer_payment_record
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.customerName != null">
        customer_name = #{record.customerName,jdbcType=VARCHAR},
      </if>
      <if test="record.billStartTime != null">
        bill_start_time = #{record.billStartTime,jdbcType=DATE},
      </if>
      <if test="record.billEndTime != null">
        bill_end_time = #{record.billEndTime,jdbcType=DATE},
      </if>
      <if test="record.customaryDues != null">
        customary_dues = #{record.customaryDues,jdbcType=DECIMAL},
      </if>
      <if test="record.actualPayment != null">
        actual_payment = #{record.actualPayment,jdbcType=DECIMAL},
      </if>
      <if test="record.balanceDue != null">
        balance_due = #{record.balanceDue,jdbcType=DECIMAL},
      </if>
      <if test="record.smallChange != null">
        small_change = #{record.smallChange,jdbcType=DECIMAL},
      </if>
      <if test="record.defectiveGoods != null">
        defective_goods = #{record.defectiveGoods,jdbcType=DECIMAL},
      </if>
      <if test="record.spredReturnMoney != null">
        spred_return_money = #{record.spredReturnMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.billStatus != null">
        bill_status = #{record.billStatus,jdbcType=CHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.operator != null">
        operator = #{record.operator,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update zly_customer_payment_record
    set id = #{record.id,jdbcType=INTEGER},
      customer_name = #{record.customerName,jdbcType=VARCHAR},
      bill_start_time = #{record.billStartTime,jdbcType=DATE},
      bill_end_time = #{record.billEndTime,jdbcType=DATE},
      customary_dues = #{record.customaryDues,jdbcType=DECIMAL},
      actual_payment = #{record.actualPayment,jdbcType=DECIMAL},
      balance_due = #{record.balanceDue,jdbcType=DECIMAL},
      small_change = #{record.smallChange,jdbcType=DECIMAL},
      defective_goods = #{record.defectiveGoods,jdbcType=DECIMAL},
      spred_return_money = #{record.spredReturnMoney,jdbcType=DECIMAL},
      bill_status = #{record.billStatus,jdbcType=CHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      operator = #{record.operator,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hzcf.shoes.model.CustomerPaymentRecord">
    update zly_customer_payment_record
    <set>
      <if test="customerName != null">
        customer_name = #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="billStartTime != null">
        bill_start_time = #{billStartTime,jdbcType=DATE},
      </if>
      <if test="billEndTime != null">
        bill_end_time = #{billEndTime,jdbcType=DATE},
      </if>
      <if test="customaryDues != null">
        customary_dues = #{customaryDues,jdbcType=DECIMAL},
      </if>
      <if test="actualPayment != null">
        actual_payment = #{actualPayment,jdbcType=DECIMAL},
      </if>
      <if test="balanceDue != null">
        balance_due = #{balanceDue,jdbcType=DECIMAL},
      </if>
      <if test="smallChange != null">
        small_change = #{smallChange,jdbcType=DECIMAL},
      </if>
      <if test="defectiveGoods != null">
        defective_goods = #{defectiveGoods,jdbcType=DECIMAL},
      </if>
      <if test="spredReturnMoney != null">
        spred_return_money = #{spredReturnMoney,jdbcType=DECIMAL},
      </if>
      <if test="billStatus != null">
        bill_status = #{billStatus,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operator != null">
        operator = #{operator,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hzcf.shoes.model.CustomerPaymentRecord">
    update zly_customer_payment_record
    set customer_name = #{customerName,jdbcType=VARCHAR},
      bill_start_time = #{billStartTime,jdbcType=DATE},
      bill_end_time = #{billEndTime,jdbcType=DATE},
      customary_dues = #{customaryDues,jdbcType=DECIMAL},
      actual_payment = #{actualPayment,jdbcType=DECIMAL},
      balance_due = #{balanceDue,jdbcType=DECIMAL},
      small_change = #{smallChange,jdbcType=DECIMAL},
      defective_goods = #{defectiveGoods,jdbcType=DECIMAL},
      spred_return_money = #{spredReturnMoney,jdbcType=DECIMAL},
      bill_status = #{billStatus,jdbcType=CHAR},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      operator = #{operator,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


 <!-- 订单列表分页 -->
  <select id="findAllRetMapByPage" resultType="hashmap" parameterType="hashmap">
	  SELECT
	    	id,
			customer_name,
			sum(customary_dues) customary_dues,
			sum(actual_payment) actual_payment,
			sum(balance_due) balance_due,
			sum(small_change) small_change,
			sum(defective_goods) defective_goods,
 			sum(spred_return_money) spred_return_money
	FROM
		zly_customer_payment_record
		group by customer_name 
		<if test="customerName != null">
			having customer_name = #{customerName} 
		</if> 
		limit #{startIndex},#{pageSize}
  </select>
  
  <!-- 订单列表分页总数 -->
  <select id="findAllByPageCount" resultType="long" parameterType="hashmap">
  select COUNT(DISTINCT customer_name) from zly_customer_payment_record
	<if test="customerName != null">
		where  customer_name = #{customerName} 
	</if> 
  </select>
  

<!-- 根据姓名查询客户账单列表 -->
  <select id="getCustomerBackRecordList" parameterType="java.util.Map" resultType="hashMap">
    select
       id ,
       customer_name customerName,
		DATE_FORMAT(create_time,'%Y-%m-%d') createTime,
		DATE_FORMAT(bill_start_time,'%Y-%m-%d') billStartTime,
		DATE_FORMAT(bill_end_time,'%Y-%m-%d') billEndTime,
      customary_dues customaryDues ,
      actual_payment actualPayment ,
      balance_due	balanceDue ,
      small_change snallChange ,
      defective_goods	defectiveGoods,
      bill_status  billStatus,
      spred_return_money spredReturnMoney,
     case when bill_status = 0 then '是'
     else '否' end  as billStatusZH,
     remark
   	 from zly_customer_payment_record 
     where customer_name = #{customerName}
    order by create_time desc
   	 limit #{startIndex},#{endIndex}
  </select>

<!-- 查询客户账单列表count -->
  <select id="getCustomerBackRecordListTotal" parameterType="java.util.Map" resultType="java.lang.Long">
        select
            count(0) totalRecord
        from
          zly_customer_payment_record
        where
          customer_name = #{customerName}
  </select>

<!-- 查询客户账单中订单的开始时间 -->
<select id="getBillStartTime" parameterType="String" resultType="hashmap">
	SELECT
		bill_start_time 
	FROM
		zly_customer_payment_record
	where  customer_name = #{customerName}
	ORDER BY
		bill_start_time ASC limit 1
</select>

<!-- 查询客户账单中订单的结束时间 -->
<select id="getBillEndTime" parameterType="String" resultType="hashmap">
	SELECT
		bill_end_time 
	FROM
		zly_customer_payment_record
	where  customer_name = #{customerName}
	ORDER BY
		bill_start_time desc limit 1
</select>

 <!-- 查询客户历史账单 总欠款 -->
  <select id="getTotaMoneyOwed" parameterType="String" resultType="hashmap">
	SELECT
		IFNULL(sum(balance_due),0) balanceDue
	FROM
		zly_customer_payment_record
	WHERE
		customer_name = #{customerName}
  </select>
  
   <!-- 查询客户最新一笔账单时间 -->
  <select id="getLastOneTime" parameterType="String" resultType="hashmap">
  SELECT
		DATE_FORMAT(create_time,'%Y-%m-%d') create_time
	FROM
		zly_customer_payment_record
	WHERE
		customer_name = #{customerName}
	ORDER BY
		create_time DESC
	LIMIT 1
  </select>
  
  <select id="selectById" parameterType="int" resultType="hashmap">
  	SELECT
		id,
		customer_name customerName,
		 DATE_FORMAT(bill_start_time,'%Y-%m-%d') bill_start_time,
		 DATE_FORMAT(bill_end_time,'%Y-%m-%d') bill_end_time,
		 DATE_FORMAT(create_time,'%Y-%m-%d') create_time,
		customary_dues,
		actual_payment,
		balance_due,
		small_change,
		defective_goods,
		spred_return_money,
		bill_status billStatus,
		remark
	FROM
		zly_customer_payment_record
	where id = #{id}
  </select>
  
  <!-- 根据客户姓名查询账单list -->
  <select id="getCustomerBillListByCustomerName" parameterType="String" resultMap="BaseResultMap">
  SELECT
	id,
	customer_name,
	actual_payment,
	balance_due
FROM
	zly_customer_payment_record
 where
          customer_name = #{customerName}

AND bill_status = '1'
order by create_time
  </select>
</mapper>