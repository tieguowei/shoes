<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hzcf.shoes.dao.CustomerPaymentRecordMapper" >
  <resultMap id="BaseResultMap" type="com.hzcf.shoes.model.CustomerPaymentRecord" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="bill_start_time" property="billStartTime" jdbcType="DATE" />
    <result column="bill_end_time" property="billEndTime" jdbcType="DATE" />
    <result column="customary_dues" property="customaryDues" jdbcType="DECIMAL" />
    <result column="actual_payment" property="actualPayment" jdbcType="DECIMAL" />
    <result column="balance_due" property="balanceDue" jdbcType="DECIMAL" />
    <result column="small_change" property="smallChange" jdbcType="DECIMAL" />
    <result column="defective_goods" property="defectiveGoods" jdbcType="DECIMAL" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="operator" property="operator" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, bill_start_time, bill_end_time, customary_dues, actual_payment, balance_due, 
    small_change, defective_goods, create_time, operator
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hzcf.shoes.model.CustomerPaymentRecordExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from zly_customer_payment_record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from zly_customer_payment_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from zly_customer_payment_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hzcf.shoes.model.CustomerPaymentRecordExample" >
    delete from zly_customer_payment_record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hzcf.shoes.model.CustomerPaymentRecord" >
    insert into zly_customer_payment_record (id, name, bill_start_time, 
      bill_end_time, customary_dues, actual_payment, 
      balance_due, small_change, defective_goods, 
      create_time, operator)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{billStartTime,jdbcType=DATE}, 
      #{billEndTime,jdbcType=DATE}, #{customaryDues,jdbcType=DECIMAL}, #{actualPayment,jdbcType=DECIMAL}, 
      #{balanceDue,jdbcType=DECIMAL}, #{smallChange,jdbcType=DECIMAL}, #{defectiveGoods,jdbcType=DECIMAL}, 
      #{createTime,jdbcType=TIMESTAMP}, #{operator,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.hzcf.shoes.model.CustomerPaymentRecord" >
    insert into zly_customer_payment_record
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="billStartTime != null" >
        bill_start_time,
      </if>
      <if test="billEndTime != null" >
        bill_end_time,
      </if>
      <if test="customaryDues != null" >
        customary_dues,
      </if>
      <if test="actualPayment != null" >
        actual_payment,
      </if>
      <if test="balanceDue != null" >
        balance_due,
      </if>
      <if test="smallChange != null" >
        small_change,
      </if>
      <if test="defectiveGoods != null" >
        defective_goods,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="operator != null" >
        operator,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="billStartTime != null" >
        #{billStartTime,jdbcType=DATE},
      </if>
      <if test="billEndTime != null" >
        #{billEndTime,jdbcType=DATE},
      </if>
      <if test="customaryDues != null" >
        #{customaryDues,jdbcType=DECIMAL},
      </if>
      <if test="actualPayment != null" >
        #{actualPayment,jdbcType=DECIMAL},
      </if>
      <if test="balanceDue != null" >
        #{balanceDue,jdbcType=DECIMAL},
      </if>
      <if test="smallChange != null" >
        #{smallChange,jdbcType=DECIMAL},
      </if>
      <if test="defectiveGoods != null" >
        #{defectiveGoods,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operator != null" >
        #{operator,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hzcf.shoes.model.CustomerPaymentRecordExample" resultType="java.lang.Integer" >
    select count(*) from zly_customer_payment_record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update zly_customer_payment_record
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.billStartTime != null" >
        bill_start_time = #{record.billStartTime,jdbcType=DATE},
      </if>
      <if test="record.billEndTime != null" >
        bill_end_time = #{record.billEndTime,jdbcType=DATE},
      </if>
      <if test="record.customaryDues != null" >
        customary_dues = #{record.customaryDues,jdbcType=DECIMAL},
      </if>
      <if test="record.actualPayment != null" >
        actual_payment = #{record.actualPayment,jdbcType=DECIMAL},
      </if>
      <if test="record.balanceDue != null" >
        balance_due = #{record.balanceDue,jdbcType=DECIMAL},
      </if>
      <if test="record.smallChange != null" >
        small_change = #{record.smallChange,jdbcType=DECIMAL},
      </if>
      <if test="record.defectiveGoods != null" >
        defective_goods = #{record.defectiveGoods,jdbcType=DECIMAL},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.operator != null" >
        operator = #{record.operator,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update zly_customer_payment_record
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      bill_start_time = #{record.billStartTime,jdbcType=DATE},
      bill_end_time = #{record.billEndTime,jdbcType=DATE},
      customary_dues = #{record.customaryDues,jdbcType=DECIMAL},
      actual_payment = #{record.actualPayment,jdbcType=DECIMAL},
      balance_due = #{record.balanceDue,jdbcType=DECIMAL},
      small_change = #{record.smallChange,jdbcType=DECIMAL},
      defective_goods = #{record.defectiveGoods,jdbcType=DECIMAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      operator = #{record.operator,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hzcf.shoes.model.CustomerPaymentRecord" >
    update zly_customer_payment_record
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="billStartTime != null" >
        bill_start_time = #{billStartTime,jdbcType=DATE},
      </if>
      <if test="billEndTime != null" >
        bill_end_time = #{billEndTime,jdbcType=DATE},
      </if>
      <if test="customaryDues != null" >
        customary_dues = #{customaryDues,jdbcType=DECIMAL},
      </if>
      <if test="actualPayment != null" >
        actual_payment = #{actualPayment,jdbcType=DECIMAL},
      </if>
      <if test="balanceDue != null" >
        balance_due = #{balanceDue,jdbcType=DECIMAL},
      </if>
      <if test="smallChange != null" >
        small_change = #{smallChange,jdbcType=DECIMAL},
      </if>
      <if test="defectiveGoods != null" >
        defective_goods = #{defectiveGoods,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operator != null" >
        operator = #{operator,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hzcf.shoes.model.CustomerPaymentRecord" >
    update zly_customer_payment_record
    set name = #{name,jdbcType=VARCHAR},
      bill_start_time = #{billStartTime,jdbcType=DATE},
      bill_end_time = #{billEndTime,jdbcType=DATE},
      customary_dues = #{customaryDues,jdbcType=DECIMAL},
      actual_payment = #{actualPayment,jdbcType=DECIMAL},
      balance_due = #{balanceDue,jdbcType=DECIMAL},
      small_change = #{smallChange,jdbcType=DECIMAL},
      defective_goods = #{defectiveGoods,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      operator = #{operator,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>